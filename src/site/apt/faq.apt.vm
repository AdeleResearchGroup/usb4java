 -----------------------------------------------------------------------------
 FAQ
 -----------------------------------------------------------------------------
 
Frequently asked questions

  If you have a question which is not answered here please create an
  {{{${project.issueManagement.url}}issue on GitHub}}.
  
* usb4java lists no USB devices on Linux. Why?

  On Linux you need write permissions on the device file of the USB device
  you want to communicate with. Check if the devices are accessible when
  running your program as root. If this works then it is recommended to
  configure <udev> to give your user write permissions when the device
  is attached. You can do this by creating a file like
  </lib/udev/rules.d/99-userusbdevices.rules> with content like this:

----
  SUBSYSTEM=="usb",SYSFS{idVendor}=="89ab",SYSFS{idProduct}=="4567",MODE="0660",GROUP="plugdev"
----

  This means that whenever a USB device with vendor id <0x89ab> and product id
  <0x4567> is attached then the group <plugdev> is permitted to
  write to the device. So make sure your user is in that group (or use a
  different group).
  
  If your device uses a shared vendor/product id then you might want to
  filter for the manufacturer and product name. This can be done by checking
  the SYSFS properties <idVendor> and <{idProduct}>.
  
  To activate this new configuration you have to restart your udev daemon
  (<<</etc/init.d/udev restart>>>) and then re-attach the USB device.

* usb4java lists no USB devices on Windows. Why?

  On Windows you need to create a driver to bind your USB device to libusb.
  Don't worry, this isn't that complicated but still too complicated to
  explain here. The
  {{{http://sourceforge.net/apps/trac/libusb-win32/wiki}libusb-win32 project}}
  explains how to do it.
  
* usb4java crashes on 64 bit Windows when using 32 bit Java. Why?

  In theory this should work but currently it doesn't. 
  usb4java correctly uses the 32 bit libusb wrapper, the same library which 
  works fine on a 32 bit Windows machine. I have no idea why it doesn't work, 
  the crash happens in the JVM itself. Only workaround I know of is using 64 
  bit Java instead.
  